// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    
}

// model Example {
//     id        String   @id @default(cuid())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

model Role {
    id   Int    @id @default(autoincrement())
    name String
    User User[]
}

// Necessary for Next auth
model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id           Int      @id @default(autoincrement())
    nom          String
    prenom       String
    email        String  @unique
    telephone    Int  @unique
    matricule    Int @unique
    password     String
    date_naissance String
    leui_naissance String
    etablissement_id  Int
    etablissement  Etablissement @relation(fields: [etablissement_id], references: [id])
    
    accounts     Account[]
    sessions     Session[]
    role_id      Int
    role         Role      @relation(fields: [role_id], references: [id])
    
    filiere String?
    faculty String?
    facult Faculty? @relation(fields: [faculty], references: [nom])
    departement String ?
    departemen Departement? @relation(fields: [departement], references: [nom])
    specialite String?
    typeDiplome String?
    diplomes Diplome[]
    image      Image?
}


model Etablissement{
    id Int @id @default(autoincrement())
    nom String
    adresse String
    telephone Int
    email String
    User User[]
    department Departement[]
    faculty Faculty[]
}

model Faculty{
    nom String @unique
    etablissement_id Int
    etablissement Etablissement @relation(fields: [etablissement_id], references: [id], onDelete: Cascade)
    User User[]
}
model Departement{
    nom String @unique
    etablissement_id Int
    etablissement Etablissement @relation(fields: [etablissement_id], references: [id], onDelete: Cascade)
    User User[]
    }
model Image{
    id Int @id @default(autoincrement())
    user User? @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id Int?  @unique
    name String
    size Int
    lastModified Int
    type String
    }

model Diplome {
    id String @id @default(cuid())
    type String
    date_obtention String
    signedByRector Boolean
    signedByDoyen Boolean
    student_id Int
    student User @relation(fields: [student_id], references: [id], onDelete: Cascade)
}
  
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
