// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// model Example {
//     id        String   @id @default(cuid())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
// }

model Role {
    id   Int    @id @default(autoincrement())
    name String
    User User[]
}

// Necessary for Next auth
model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               Int           @id @default(autoincrement())
    nom              String
    prenom           String
    email            String        @unique
    telephone        String        @unique
    matricule        String        @unique
    password         String
    date_naissance   String
    leui_naissance   String
    etablissement_id Int
    etablissement    Etablissement @relation(fields: [etablissement_id], references: [id], onDelete: Cascade)

    accounts Account[]
    sessions Session[]
    role_id  Int
    role     Role      @relation(fields: [role_id], references: [id], onDelete: Cascade)

    filiere               String?
    faculty_id            Int?
    faculty               Faculty?                @relation(fields: [faculty_id], references: [id], onDelete: Cascade)
    departement_id        Int?
    departement           Departement?            @relation(fields: [departement_id], references: [id], onDelete: Cascade)
    specialite            String?
    typeDiplome           String?
    diplomes              Diplome[]
    image                 Image?
    PasswordConfiguration PasswordConfiguration[]
}

model Etablissement {
    id         Int           @id @default(autoincrement())
    nom        String
    adresse    String
    telephone  Int
    email      String
    User       User[]
    department Departement[]
    faculty    Faculty[]
}

model Faculty {
    id                  Int                   @id @default(autoincrement())
    nom                 String
    etablissement_id    Int
    etablissement       Etablissement         @relation(fields: [etablissement_id], references: [id], onDelete: Cascade)
    User                User[]
    CursusUniversitaire CursusUniversitaire[]
}

model Departement {
    id                  Int                   @id @default(autoincrement())
    nom                 String
    etablissement_id    Int
    etablissement       Etablissement         @relation(fields: [etablissement_id], references: [id], onDelete: Cascade)
    User                User[]
    CursusUniversitaire CursusUniversitaire[]
}

model Image {
    id           Int     @id @default(autoincrement())
    user         User?   @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id      Int?    @unique
    name         String
    size         Int
    lastModified String
    path         String?
    type         String?
}

model Diplome {
    id             Int      @id @default(autoincrement())
    type           String
    date_obtention DateTime @db.Date
    signedByRector Boolean  @default(false)
    signedByDoyen  Boolean  @default(false)
    student        Etudiant @relation(fields: [student_id], references: [id], onDelete: Cascade)
    student_id     Int
    user           User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
    user_id        Int
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//mimic ent.usthb database

model Etudiant {
    id                  Int                   @id @default(autoincrement())
    nom                 String
    prenom              String
    email               String                @unique
    matricule           String                @unique
    date_naissance      String
    lieu_naissance      String
    CursusUniversitaire CursusUniversitaire[]
    Diplome             Diplome[]
}

model CursusUniversitaire {
    id               Int                @id @default(autoincrement())
    section          String
    groupe           String
    filiere          String?
    faculty_id       Int?
    faculty          Faculty?           @relation(fields: [faculty_id], references: [id], onDelete: Cascade)
    departement_id   Int?
    departement      Departement?       @relation(fields: [departement_id], references: [id], onDelete: Cascade)
    specialite       String?
    moyenne_annuelle Decimal?           @db.Decimal(4, 2)
    annee_id         Int
    annee            AnneeUniversitaire @relation(fields: [annee_id], references: [id], onDelete: Cascade)
    niveau           Int
    Etudiant         Etudiant?          @relation(fields: [etudiant_id], references: [id])
    etudiant_id      Int?
}

model AnneeUniversitaire {
    id                  Int                   @id @default(autoincrement())
    annee               Int
    isCurrent           Boolean
    CursusUniversitaire CursusUniversitaire[]
}

model PasswordConfiguration {
    id      Int      @id @default(autoincrement())
    user_id Int
    user    User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
    token   String
    used    Boolean  @default(false)
    expires DateTime
}
